#!/usr/bin/env python
########################################################################################################
# Name: DashboardVolReports.py
#
# Desc: Get Extract Volume data for period 
#
# Modified: 
#
# Paul Baranoski 2025-01-07 Created python module.
# Paul Baranoski 2025-03-27 Add RAW BYTE_COUNT to results-set.
########################################################################################################
import os
import sys
import datetime
from datetime import datetime
import sendEmail

currentDirectory = os.path.dirname(os.path.realpath(__file__))
rootDirectory = os.path.abspath(os.path.join(currentDirectory, ".."))
utilDirectory = os.getenv('CMN_UTIL')

sys.path.append(rootDirectory)
sys.path.append(utilDirectory)
script_name = os.path.basename(__file__)

import snowconvert_helpers
from snowconvert_helpers import Export

########################################################################################################
# VARIABLE ASSIGNMENT
########################################################################################################
con = None 
now = datetime.now()
date_time = now.strftime("%m/%d/%Y, %H:%M:%S")

# Use Timestamp generated by shell script so logs and output files will have timestamp
TMSTMP=os.getenv('UNIQUE_FILE_TMSTMP')
ENVNAME=os.getenv('ENVNAME')

EXT_FROM_DT=os.getenv('EXT_FROM_DT')
EXT_THRU_DT=os.getenv('EXT_THRU_DT')

DASHBOARD_VOL_RPT_TXT_FILE_ZIP=os.getenv('DASHBOARD_VOL_RPT_TXT_FILE_ZIP')
EXT_TYPE=os.getenv('EXT_TYPE')

# Do Not include Extract totals for monthly
print (f"EXT_TYPE={EXT_TYPE}")
if  EXT_TYPE == "M":
    INCLUDE_EXT_TOTALS=""
    INCLUDE_GRAND_TOTALS=""
else:    
    INCLUDE_EXT_TOTALS="UNION SELECT * FROM EXT_TOTALS"
    INCLUDE_GRAND_TOTALS="UNION SELECT * FROM GRAND_TOTAL "

# boolean - Python Exception status
bPythonExceptionOccurred=False

     
########################################################################################################
# RUN
########################################################################################################
print('')
print("Run date and time: " + date_time  )
print('')

########################################################################################################
# Method to execute the extract SQL using Timestamp 
########################################################################################################
try:
   snowconvert_helpers.configure_log()
   con = snowconvert_helpers.log_on()   
   snowconvert_helpers.execute_sql_statement(f"alter session set query_tag='{script_name}'",con,exit_on_error = True)
   snowconvert_helpers.execute_sql_statement("""USE WAREHOUSE ${sf_xtr_warehouse}""", con,exit_on_error = True)
   
   #**************************************
   #   Extract NYSPAP Bene Contract data  
   #**************************************   
   snowconvert_helpers.execute_sql_statement(f"""COPY INTO @BIA_{ENVNAME}.CMS_STAGE_XTR_{ENVNAME}.BIA_{ENVNAME}_XTR_DASHBOARD_STG/{DASHBOARD_VOL_RPT_TXT_FILE_ZIP}
                                                FROM (

             WITH DETAIL_INFO AS (

                SELECT EXT_NAME,YYYY_MM AS TIME_PERIOD, COUNT(EXT_FILENAME) AS NOF_EXT_FILES, SUM(REC_COUNT) AS REC_CNT, SUM(BYTE_COUNT) AS BYTE_CNT
                FROM (
                    SELECT UPPER(EXT_NAME) AS EXT_NAME 
                          ,TO_CHAR(RUN_TMSTMP,'YYYY-MM') AS YYYY_MM
                          ,EXT_FILENAME
                          ,REC_COUNT
                          ,BYTE_COUNT
                    FROM BIA_{ENVNAME}.CMS_TARGET_XTR_{ENVNAME}.UTIL_EXT_RUN_EXT_FILES
                    WHERE TO_DATE(RUN_TMSTMP) BETWEEN TO_DATE('{EXT_FROM_DT}','YYYY-MM-DD')  
                                                  AND TO_DATE('{EXT_THRU_DT}','YYYY-MM-DD')
                      --AND EXT_NAME like 'DSH%'
                )
                GROUP BY EXT_NAME, TIME_PERIOD
                        
            )

            ,EXT_TOTALS AS (

               SELECT EXT_NAME||' YTD', TIME_PERIOD, NOF_FILES, REC_CNT, BYTE_CNT  
               FROM (
                   SELECT EXT_NAME, MAX(SUBSTR(TIME_PERIOD,1,4)) AS TIME_PERIOD, SUM(NOF_EXT_FILES) AS NOF_FILES, SUM(REC_CNT) AS REC_CNT, SUM(BYTE_CNT) AS BYTE_CNT
                    --SELECT *
                    FROM DETAIL_INFO 
                    GROUP BY EXT_NAME
               ) 

            ) 

            ,MONTH_TOTALS AS (

               SELECT 'ZY-MONTH-TOTAL', TIME_PERIOD, NOF_FILES, REC_CNT, BYTE_CNT  
               FROM (
                   SELECT TIME_PERIOD, SUM(NOF_EXT_FILES) AS NOF_FILES, SUM(REC_CNT) AS REC_CNT, SUM(BYTE_CNT) AS BYTE_CNT
                    --SELECT *
                    FROM DETAIL_INFO 
                    GROUP BY TIME_PERIOD
               ) 

            ) 

            ,GRAND_TOTAL AS (

               SELECT 'ZZ-GRAND-TOTAL', TIME_PERIOD_LIT, NOF_FILES, REC_CNT, BYTE_CNT  
               FROM (
                    SELECT 'YTD' AS TIME_PERIOD_LIT, SUM(NOF_EXT_FILES) AS NOF_FILES, SUM(REC_CNT) AS REC_CNT, SUM(BYTE_CNT) AS BYTE_CNT
                    FROM DETAIL_INFO 
                    GROUP BY TIME_PERIOD_LIT
               ) 

            ) 

              SELECT EXT_NAME,TIME_PERIOD, TO_CHAR(NOF_EXT_FILES,'999,999,999') AS NOF_EXT_FILES, TO_CHAR(REC_CNT,'999,999,999,999') AS REC_CNT
                    ,CASE WHEN BYTE_CNT > 1099511627776 
                         THEN (TO_CHAR( (BYTE_CNT / 1099511627776), '9,999,999.00') || ' TB') 
                         WHEN BYTE_CNT > 1073741824 
                         THEN (TO_CHAR( (BYTE_CNT / 1073741824), '9,999.00') || ' GB') 
                         WHEN BYTE_CNT > 1048576 
                         THEN (TO_CHAR( (BYTE_CNT / 1048576)   , '9,999.00') || ' MB') 
                         WHEN BYTE_CNT > 1024 
                         THEN (TO_CHAR( (BYTE_CNT / 1024)      , '9,999.00') || ' KB') 
                         ELSE (TO_CHAR( BYTE_CNT               , '9,999.00') || ' B') 
                         END AS NOF_BYTES
                    ,BYTE_CNT
             FROM (        
                    SELECT * FROM DETAIL_INFO  
                    {INCLUDE_EXT_TOTALS}        
                    UNION SELECT * FROM MONTH_TOTALS  
                    {INCLUDE_GRAND_TOTALS}

             )
	
            ORDER BY EXT_NAME, TIME_PERIOD
 )
                        FILE_FORMAT = (TYPE = CSV field_delimiter = "|"  ESCAPE_UNENCLOSED_FIELD=NONE FIELD_OPTIONALLY_ENCLOSED_BY = NONE NULL_IF=() EMPTY_FIELD_AS_NULL=FALSE )
                        SINGLE = TRUE HEADER=TRUE max_file_size=5368709120  """, con, exit_on_error=True)


   
   #**************************************
   # End Application
   #**************************************    
   snowconvert_helpers.quit_application()
   
except Exception as e:
   print(e)
   
   # Let shell script know that python code failed.
   bPythonExceptionOccurred=True   
   
finally:
   if con is not None:
      con.close()

   # Let shell script know that python code failed.      
   if bPythonExceptionOccurred == True:
      sys.exit(12) 
   else:   
      snowconvert_helpers.quit_application()

