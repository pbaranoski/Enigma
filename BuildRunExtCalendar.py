#!/usr/bin/env python
########################################################################################################
# Name: BuildRunExtCalendar.py
#
# Desc: BuildRunExtCalendar.sh Load UTIL_EXT_CALENDAR with flat file data.
#
# Modified:
#
# Paul Baranoski 2024-02-05 Create SQL
# Paul Baranoski 2024-02-20 Change field delimiter from comma to pipe.
# Paul Baranoski 2024-02-21 Add support for new column FF_PRE_PROCESS.
# Paul Baranoski 2024-03-11 Add support for new column AUTOMATED.
########################################################################################################
import os
import sys
import datetime
from datetime import datetime
import sendEmail

currentDirectory = os.path.dirname(os.path.realpath(__file__))
rootDirectory = os.path.abspath(os.path.join(currentDirectory, ".."))
utilDirectory = os.getenv('CMN_UTIL')

sys.path.append(rootDirectory)
sys.path.append(utilDirectory)
script_name = os.path.basename(__file__)

import snowconvert_helpers
from snowconvert_helpers import Export

########################################################################################################
# VARIABLE ASSIGNMENT
########################################################################################################
con = None 
now = datetime.now()
date_time = now.strftime("%m/%d/%Y, %H:%M:%S")

# Use Timestamp generated by shell script so logs and output files will have timestamp
TMSTMP=os.getenv('UNIQUE_FILE_TMSTMP')
ENVNAME=os.getenv('ENVNAME')

PROCESSING_YYYY=os.getenv('ProcessingYYYY')
RUN_CALENDAR_OUTPUT_FILE=os.getenv('RUN_CALENDAR_OUTPUT_FILE')


# boolean - Python Exception status
bPythonExceptionOccurred=False

     
########################################################################################################
# RUN
########################################################################################################
print('')
print("Run date and time: " + date_time  )
print('')

########################################################################################################
# Method to execute the extract SQL using Timestamp 
########################################################################################################
try:
   snowconvert_helpers.configure_log()
   con = snowconvert_helpers.log_on()   
   snowconvert_helpers.execute_sql_statement(f"alter session set query_tag='{script_name}'",con,exit_on_error = True)
   snowconvert_helpers.execute_sql_statement("""USE WAREHOUSE ${sf_xtr_warehouse}""", con,exit_on_error = True)

   ## Delete records from TARGET TABLE ##
   snowconvert_helpers.execute_sql_statement(f"""DELETE FROM BIA_{ENVNAME}.CMS_TARGET_XTR_{ENVNAME}.UTIL_EXT_CALENDAR 
                                                 WHERE EXT_DT BETWEEN TO_DATE('{PROCESSING_YYYY}-01-01','YYYY-MM-DD') AND TO_DATE('{PROCESSING_YYYY}-12-31','YYYY-MM-DD')             
                                              """, con,exit_on_error = True)
                                                        
   ## INSERT Extract FILE value into TO THE TARGET TABLE ##
   snowconvert_helpers.execute_sql_statement(f"""COPY INTO BIA_{ENVNAME}.CMS_TARGET_XTR_{ENVNAME}.UTIL_EXT_CALENDAR 
                                                (EXT_DT,DOW,EXT_KEY,EXT_DESC,TIMEFRAME_IND,DOW_DOM,CAL_MONTHS,CAL_DAY,FINDER_FILE_REQ,FF_PRE_PROCESS, DELIVERY_METHOD,MF_DEPENDENCY,ETL_DEPENDENCY, SAS_DEPENDENCY,AUTOMATED)
                                                        FROM (SELECT f.$1,f.$2,f.$3,f.$4,f.$5,f.$6,f.$7,f.$8,f.$9,f.$10,f.$11,f.$12,f.$13,f.$14,f.$15
                                                              FROM @BIA_{ENVNAME}.CMS_STAGE_XTR_{ENVNAME}.BIA_{ENVNAME}_XTR_CALENDAR_STG/{RUN_CALENDAR_OUTPUT_FILE} f)
                                                        FILE_FORMAT = (TYPE=CSV FIELD_DELIMITER='|') FORCE=TRUE """, con,exit_on_error = True)

   
   #**************************************
   # End Application
   #**************************************    
   snowconvert_helpers.quit_application()
   
except Exception as e:
   print(e)
   
   # Let shell script know that python code failed.
   bPythonExceptionOccurred=True   
   
finally:
   if con is not None:
      con.close()

   # Let shell script know that python code failed.      
   if bPythonExceptionOccurred == True:
      sys.exit(12) 
   else:   
      snowconvert_helpers.quit_application()

