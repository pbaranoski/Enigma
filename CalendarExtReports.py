#!/usr/bin/env python
########################################################################################################
# Name: CalendarExtReports.sh
#
# Desc: Run SQL to Extract Run Calendar data for a specific time period 
#
# Modified:
#
# Paul Baranoski 2024-02-08 Created script.
# Paul Baranoski 2024-02-21 Add support for new column FF_PRE_PROCESS.
# Paul Baranoski 2024-03-11 Add support for new column AUTOMATED
########################################################################################################
import os
import sys
import datetime
from datetime import datetime
import sendEmail

currentDirectory = os.path.dirname(os.path.realpath(__file__))
rootDirectory = os.path.abspath(os.path.join(currentDirectory, ".."))
utilDirectory = os.getenv('CMN_UTIL')

sys.path.append(rootDirectory)
sys.path.append(utilDirectory)
script_name = os.path.basename(__file__)

import snowconvert_helpers
from snowconvert_helpers import Export

########################################################################################################
# VARIABLE ASSIGNMENT
########################################################################################################
con = None 
now = datetime.now()
date_time = now.strftime("%m/%d/%Y, %H:%M:%S")

# Use Timestamp generated by shell script so logs and output files will have timestamp
TMSTMP=os.getenv('UNIQUE_FILE_TMSTMP')
ENVNAME=os.getenv('ENVNAME')

EXT_FROM_DT=os.getenv('EXT_FROM_DT')
EXT_TO_DT=os.getenv('EXT_TO_DT')

CALENDAR_EXTRACT_RPT_FILE_ZIP=os.getenv('CALENDAR_EXTRACT_RPT_FILE_ZIP')


# boolean - Python Exception status
bPythonExceptionOccurred=False

     
########################################################################################################
# RUN
########################################################################################################
print('')
print("Run date and time: " + date_time  )
print('')

########################################################################################################
# Method to execute the extract SQL using Timestamp 
########################################################################################################
try:
   snowconvert_helpers.configure_log()
   con = snowconvert_helpers.log_on()   
   snowconvert_helpers.execute_sql_statement(f"alter session set query_tag='{script_name}'",con,exit_on_error = True)
   snowconvert_helpers.execute_sql_statement("""USE WAREHOUSE ${sf_xtr_warehouse}""", con,exit_on_error = True)
   
   #**************************************
   #   Extract NYSPAP Bene Contract data  
   #**************************************   
   snowconvert_helpers.execute_sql_statement(f"""COPY INTO @BIA_{ENVNAME}.CMS_STAGE_XTR_{ENVNAME}.BIA_{ENVNAME}_XTR_CALENDAR_STG/{CALENDAR_EXTRACT_RPT_FILE_ZIP}
                                                FROM (

                         SELECT   EXT_DT
                                 ,DOW
                                 ,EXT_DESC
                                 ,FINDER_FILE_REQ AS FF_REQ
                                 ,COALESCE(FF_PRE_PROCESS,' ') AS FF_PRE_PROCESS
                                 ,COALESCE(AUTOMATED,' ') AS AUTOMATED
                                 ,DELIVERY_METHOD
                                 ,COALESCE(MF_DEPENDENCY,'N') AS MF_DEPENDENCY
                                 ,COALESCE(ETL_DEPENDENCY,'N') AS ETL_DEPENDENCY
                                 ,COALESCE(SAS_DEPENDENCY,'N') AS SAS_DEPENDENCY
                                 ,TIMEFRAME_IND
                                 ,COALESCE(CAL_MONTHS,' ') AS CAL_MONTHS
                                 ,COALESCE(CAL_DAY,' ') AS CAL_DAY
                        FROM BIA_{ENVNAME}.CMS_TARGET_XTR_{ENVNAME}.UTIL_EXT_CALENDAR
                        where EXT_DT BETWEEN TO_DATE('{EXT_FROM_DT}','YYYY-MM-DD') AND TO_DATE('{EXT_TO_DT}','YYYY-MM-DD')
                        ORDER BY EXT_DT, EXT_KEY, EXT_DESC		

 )
                        FILE_FORMAT = (TYPE = CSV field_delimiter = "|"  ESCAPE_UNENCLOSED_FIELD=NONE FIELD_OPTIONALLY_ENCLOSED_BY = NONE NULL_IF=() EMPTY_FIELD_AS_NULL=FALSE )
                        SINGLE = TRUE HEADER=TRUE max_file_size=5368709120  """, con, exit_on_error=True)


   
   #**************************************
   # End Application
   #**************************************    
   snowconvert_helpers.quit_application()
   
except Exception as e:
   print(e)
   
   # Let shell script know that python code failed.
   bPythonExceptionOccurred=True   
   
finally:
   if con is not None:
      con.close()

   # Let shell script know that python code failed.      
   if bPythonExceptionOccurred == True:
      sys.exit(12) 
   else:   
      snowconvert_helpers.quit_application()

