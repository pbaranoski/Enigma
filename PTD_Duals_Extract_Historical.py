#!/usr/bin/env python
########################################################################################################
# Name:  PTD_Duals_Extract_Historical.py
#
# Desc: Part D Duals Historical data Extract
#
# Created: Paul Baranoski 01/05/2023
# Modified:
#
# Paul Baranoski 2023-01-05 Create script to handle historical Part-D Duals Extract
# Paul Baranoski 2023-01-18 Modify filename to only use underscores prior to timestamp.
# Josh Turner    2024-06-10 Temp change stage to the monthly stage to get around deep freeze in S3
# Nat. Tinovsky  2024-12-20 Removed temp change for SF stage from Monthly to Historical: BIA_{ENVNAME}_XTR_PTDDUALHSTR_STG
#                           Updated length of CLM_PRSBNG_PRVDR_GNRC_ID_NUM from 20 -> 35                            
########################################################################################################
import os
import sys
import datetime
from datetime import datetime

currentDirectory = os.path.dirname(os.path.realpath(__file__))
rootDirectory = os.path.abspath(os.path.join(currentDirectory, ".."))
utilDirectory = os.getenv('CMN_UTIL')

sys.path.append(rootDirectory)
sys.path.append(utilDirectory)
script_name = os.path.basename(__file__)

import snowconvert_helpers
from snowconvert_helpers import Export

########################################################################################################
# VARIABLE ASSIGNMENT
########################################################################################################
con = None 
now = datetime.now()
date_time = now.strftime("%m/%d/%Y, %H:%M:%S")

# Use Timestamp generated by shell script so logs and output files will have timestamp
ENVNAME=os.getenv('ENVNAME')
TMSTMP=os.getenv('TMSTMP')

CLNDR_CY_MO_NUM_ENDDT=os.getenv('CLNDR_CY_MO_NUM_ENDDT')
CLM_SUBMSN_DT_START_DT=os.getenv('CLM_SUBMSN_DT_START_DT')
CLM_SUBMSN_DT_END_DT=os.getenv('CLM_SUBMSN_DT_END_DT')
STATE_IN_PHRASE=os.getenv('STATE_IN_PHRASE')
S3_EXTRACT_FILE=os.getenv('S3_EXTRACT_FILE')


# boolean - Python Exception status
bPythonExceptionOccurred=False

########################################################################################################
# RUN
########################################################################################################
print('')
print("Run date and time: " + date_time  )
print('')

########################################################################################################
# Method to execute the extract SQL using Timestamp 
########################################################################################################
try:
   snowconvert_helpers.configure_log()
   con = snowconvert_helpers.log_on()   
   snowconvert_helpers.execute_sql_statement(f"alter session set query_tag='{script_name}'",con,exit_on_error = True)
   snowconvert_helpers.execute_sql_statement("""USE WAREHOUSE ${sf_xtr_warehouse}""", con,exit_on_error = True)
   
   #**************************************
   #   Extract NYSPAP Bene Contract data  
   #**************************************   
   snowconvert_helpers.execute_sql_statement(f"""COPY INTO @BIA_{ENVNAME}.CMS_STAGE_XTR_{ENVNAME}.BIA_{ENVNAME}_XTR_PTDDUALHSTR_STG/{S3_EXTRACT_FILE}
                                                FROM (                                                               


                WITH EDGN_BENE_DUAL as (

                    SELECT DISTINCT 
                           BDUAL.BENE_SK
                          ,CLMO.CLNDR_CY_MO_NUM
                          ,FIPS.GEO_USPS_STATE_CD
                           
                    FROM IDRC_{ENVNAME}.CMS_DIM_BENE_{ENVNAME}.BENE_DUAL_STUS BDUAL

                    INNER JOIN IDRC_{ENVNAME}.CMS_DIM_GEO_{ENVNAME}.GEO_FIPS_STATE_CD GEO
                    ON BDUAL.GEO_FIPS_STATE_CD = GEO.GEO_FIPS_STATE_CD
                    
                    INNER JOIN IDRC_{ENVNAME}.CMS_DIM_CLNDR_{ENVNAME}.CLNDR_MO  CLMO
                       ON BDUAL.CLNDR_MO_ELGBL_SK = CLMO.CLNDR_MO_SK
                       
                     LEFT OUTER JOIN IDRC_{ENVNAME}.CMS_DIM_BENE_CD_{ENVNAME}.BENE_DUAL_STUS_CD BDC
                       ON BDUAL.BENE_DUAL_STUS_CD = BDC.BENE_DUAL_STUS_CD

                     LEFT OUTER JOIN IDRC_{ENVNAME}.CMS_DIM_GEO_{ENVNAME}.GEO_FIPS_STATE_CD FIPS
                       ON BDUAL.GEO_FIPS_STATE_CD = FIPS.GEO_FIPS_STATE_CD

                    WHERE BDUAL.BENE_DUAL_STUS_CD IN ('02','04','08')
                      AND GEO.GEO_USPS_STATE_CD IN ({STATE_IN_PHRASE})
                      AND CLMO.CLNDR_CY_MO_NUM >= {CLNDR_CY_MO_NUM_ENDDT}

                )

                ,DLST as (

                        --************************************************************************
                        -- This SELECT which may seem a lot like the main SQL, 
                        -- uses the filter C.CLM_LTST_CLM_IND = 'Y' to get a list of 
                        -- benes and claims. When joining this "view" to main query the results-set
                        -- lists more claims data than if the filter C.CLM_LTST_CLM_IND = 'Y'
                        -- is included in the main query.
                        --************************************************************************
                        
                        SELECT
                             C.GEO_BENE_SK
                            ,C.CLM_DT_SGNTR_SK
                            ,C.CLM_TYPE_CD
                            ,C.CLM_NUM_SK
                            ,C.CLM_UNIQ_ID
                            ,BD.GEO_USPS_STATE_CD
                            
                         FROM IDRC_{ENVNAME}.CMS_FCT_CLM_{ENVNAME}.CLM C
                         
                        INNER JOIN IDRC_{ENVNAME}.CMS_FCT_CLM_{ENVNAME}.CLM_DT_SGNTR CDS
                           ON CDS.CLM_DT_SGNTR_SK = C.CLM_DT_SGNTR_SK
                          -- between prior month beginning and ending dates 
                          --AND CDS.CLM_SUBMSN_DT BETWEEN TO_DATE(TO_CHAR(ADD_MONTHS(CURRENT_DATE, -1),'YYYY-MM-')||'01')
                          --                          AND (CURRENT_DATE - EXTRACT(day from CURRENT_DATE) )
                          AND CDS.CLM_SUBMSN_DT BETWEEN '{CLM_SUBMSN_DT_START_DT}'
                                                    AND '{CLM_SUBMSN_DT_END_DT}'
                                                    
                        INNER JOIN IDRC_{ENVNAME}.CMS_DIM_CNTRCT_{ENVNAME}.CNTRCT_PBP_NUM CPN
                          ON  C.CLM_SBMTR_CNTRCT_NUM      =  CPN.CNTRCT_NUM
                          AND C.CLM_SBMTR_CNTRCT_PBP_NUM  =  CPN.CNTRCT_PBP_NUM
                          AND CPN.CNTRCT_PBP_EFCTV_CD     =  '1'
                          AND C.CLM_FROM_DT BETWEEN CPN.CNTRCT_PBP_BGN_DT 
                                                AND CPN.CNTRCT_PBP_END_DT

                        INNER JOIN EDGN_BENE_DUAL BD
                           ON C.BENE_SK = BD.BENE_SK
                          AND TO_CHAR(C.CLM_FROM_DT,'YYYYMM') =  BD.CLNDR_CY_MO_NUM
                          --AND TRIM(C.CLM_FROM_DT (FORMAT 'YYYYMM')) (INTEGER)
                            --						 = BD.CLNDR_CY_MO_NUM
                        WHERE C.CLM_TYPE_CD IN (1,2,3,4)
                          AND C.CLM_LTST_CLM_IND = 'Y'
                          
                )


                SELECT
                 RPAD(C.CLM_SBMTR_CNTRCT_NUM,5,' ')      AS CNTRCT_NUM
                ,RPAD(C.CLM_SBMTR_CNTRCT_PBP_NUM,3,' ')  AS PBP_ID
                ,RPAD(C.CLM_HIC_NUM,20,' ')              AS HICN
                ,RPAD(C.CLM_CARDHLDR_ID,20,' ')          AS CARDHLDR_ID
                
                ,CASE WHEN C.CLM_PTNT_BIRTH_DT IS NULL    THEN '00000000'
                  WHEN C.CLM_PTNT_BIRTH_DT = '0001-01-01' THEN '00000000'
                  WHEN C.CLM_PTNT_BIRTH_DT = '1000-01-01' THEN '00000000'
                  ELSE TO_CHAR(C.CLM_PTNT_BIRTH_DT,'YYYYMMDD') 
                END   AS PTNT_DATE_OF_BIRTH
                
                
                ,CASE WHEN C.BENE_SEX_CD IN ('', '~') 
                  THEN '0' 
                  ELSE C.BENE_SEX_CD
                  END AS PTNT_GENDER_CD
                  
                ,TO_CHAR(C.CLM_FROM_DT,'YYYYMMDD') AS DATE_OF_SRVC
                   
                ,CASE WHEN C.CLM_PD_DT IS NULL     THEN '00000000' 
                  WHEN C.CLM_PD_DT = '0001-01-01'  THEN '00000000'
                  WHEN C.CLM_PD_DT = '1000-01-01'  THEN '00000000'
                  ELSE TO_CHAR(C.CLM_PD_DT,'YYYYMMDD')
                  END AS PAID_DT
                
                
                ,RPAD(COALESCE(CL.CLM_LINE_NDC_CD,' '),19,' ')    AS PRODUCT_SRVC_ID
                ,RPAD(C.PRVDR_SRVC_ID_QLFYR_CD,2,' ')             AS SRVC_PRVDR_ID_ID_QLFYR
                ,RPAD(TRIM(C.CLM_SRVC_PRVDR_GNRC_ID_NUM),15,' ')  AS SRVC_PRVDR_ID
                
                ,TO_CHAR(CLR.CLM_LINE_RX_FILL_NUM,'FM00')         AS FILL_NUM
                ,RPAD(CLR.CLM_DSPNSNG_STUS_CD,1,' ')              AS DSPNSNG_STUS
                ,RPAD(CLR.CLM_CMPND_CD,1,' ')                     AS CMPND_CD
                ,RPAD(CLR.CLM_DAW_PROD_SLCTN_CD,1,' ')            AS DAW_PROD_SLCTN_CD
                
                ,REPLACE(TO_CHAR(CL.CLM_LINE_NDC_QTY,'FM0000000.000'),'.','')
                                                                  AS QTY_DSPNSD
                
                ,TO_CHAR(CLR.CLM_LINE_DAYS_SUPLY_QTY,'FM000')     AS DAYS_SUPLY
                ,RPAD(C.PRVDR_PRSBNG_ID_QLFYR_CD,2,' ')           AS PRSCRB_ID_QLFYR
                
                --****\/****
                --OLD: NUMBER(20) X(20) 		NEW: NUMBER(35) X(35)
                --,RPAD(TRIM(C.CLM_PRSBNG_PRVDR_GNRC_ID_NUM),20,' ') 	AS PRSCRB_ID
                ,RPAD(TRIM(C.CLM_PRSBNG_PRVDR_GNRC_ID_NUM),35,' ') 		AS PRSCRB_ID
                --****/\****

                ,RPAD(TRIM(CLR.CLM_DRUG_CVRG_STUS_CD),1,' ')      AS DRUG_CVRG_STUS_CD
                
                ,CASE WHEN C.CLM_TYPE_CD = 2 THEN 'A'
                      WHEN C.CLM_TYPE_CD = 3 THEN 'D'
                      ELSE ' '
                      END  AS ADJSMT_DEL_CD
                      
                ,RPAD(C.CLM_SBMT_FRMT_CD,1,' ')                  AS NON_STAND_FRMT_CD
                ,RPAD(CLR.CLM_PRCNG_EXCPTN_CD,1,' ')             AS PRCNG_EXCPTN_CD
                ,TO_CHAR(DLST.CLM_UNIQ_ID,'FM0000000000000')        AS EFCTV_UNIQ_ID
                --,TO_CHAR(C.CLM_UNIQ_ID,'FM0000000000000')        AS EFCTV_UNIQ_ID
                ,TO_CHAR(C.CLM_UNIQ_ID,'FM0000000000000')  	     AS UNIQ_ID
                
                ,RPAD(COALESCE(C.CLM_BENE_MBI_ID,' '),11)        AS CLM_MBI_ID
                ,REPEAT(' ',15)                  AS FILLER_FLD
                ,RPAD(DLST.GEO_USPS_STATE_CD,2)  AS STATE_CD


                FROM DLST

                INNER JOIN IDRC_{ENVNAME}.CMS_FCT_CLM_{ENVNAME}.CLM C
                   ON C.GEO_BENE_EFCTV_SK     = DLST.GEO_BENE_SK
                  AND C.CLM_DT_SGNTR_EFCTV_SK = DLST.CLM_DT_SGNTR_SK
                  AND C.CLM_TYPE_EFCTV_CD     = DLST.CLM_TYPE_CD
                  AND C.CLM_NUM_EFCTV_SK      = DLST.CLM_NUM_SK
                                    
                INNER JOIN IDRC_{ENVNAME}.CMS_FCT_CLM_{ENVNAME}.CLM_LINE CL
                   ON C.CLM_NUM_SK      = CL.CLM_NUM_SK
                  AND C.CLM_TYPE_CD     = CL.CLM_TYPE_CD
                  AND C.CLM_DT_SGNTR_SK = CL.CLM_DT_SGNTR_SK
                  AND C.GEO_BENE_SK     = CL.GEO_BENE_SK
                  AND C.CLM_FROM_DT     = CL.CLM_FROM_DT

                INNER JOIN IDRC_{ENVNAME}.CMS_FCT_CLM_{ENVNAME}.CLM_LINE_RX CLR
                   ON CL.CLM_NUM_SK      = CLR.CLM_NUM_SK
                  AND CL.CLM_TYPE_CD     = CLR.CLM_TYPE_CD
                  AND CL.CLM_DT_SGNTR_SK = CLR.CLM_DT_SGNTR_SK
                  AND CL.GEO_BENE_SK     = CLR.GEO_BENE_SK
                  AND CL.CLM_LINE_NUM    = CLR.CLM_LINE_NUM

                INNER JOIN IDRC_{ENVNAME}.CMS_DIM_CNTRCT_{ENVNAME}.CNTRCT_PBP_NUM CPN
                  ON  C.CLM_SBMTR_CNTRCT_NUM      =  CPN.CNTRCT_NUM
                  AND C.CLM_SBMTR_CNTRCT_PBP_NUM  =  CPN.CNTRCT_PBP_NUM
                  AND CPN.CNTRCT_PBP_EFCTV_CD     =  '1'
                  AND C.CLM_FROM_DT BETWEEN CPN.CNTRCT_PBP_BGN_DT 
                                        AND CPN.CNTRCT_PBP_END_DT

                WHERE C.CLM_TYPE_CD IN (1,2,3,4)
                        
                ORDER BY STATE_CD
                        ,EFCTV_UNIQ_ID
                        ,C.CLM_UNIQ_ID DESC
            

 )
                        FILE_FORMAT = (TYPE = CSV field_delimiter = none  ESCAPE_UNENCLOSED_FIELD=NONE FIELD_OPTIONALLY_ENCLOSED_BY = none )
                        SINGLE=TRUE max_file_size=5368709120  """, con, exit_on_error=True)


   
   #**************************************
   # End Application
   #**************************************    
   snowconvert_helpers.quit_application()
   
except Exception as e:
   print(e)
   
   # Let shell script know that python code failed.
   bPythonExceptionOccurred=True   
   
finally:
   if con is not None:
      con.close()

   # Let shell script know that python code failed.      
   if bPythonExceptionOccurred == True:
      sys.exit(12) 
   else:   
      snowconvert_helpers.quit_application()

